import os
import sys
import time
import psutil
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class MonitorHandler(FileSystemEventHandler):
    def on_modified(self, event):
        print(f"File modified: {event.src_path}")

    def on_created(self, event):
        print(f"File created: {event.src_path}")

    def on_deleted(self, event):
        print(f"File deleted: {event.src_path}")

def monitor_system():
    # Monitor filesystem changes
    path = "."
    event_handler = MonitorHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=True)
    observer.start()
    print("Monitoring filesystem changes...")

    try:
        while True:
            # Monitor processes
            print("Processes running:")
            for proc in psutil.process_iter(['pid', 'name']):
                print(f"PID: {proc.info['pid']} - Name: {proc.info['name']}")
            time.sleep(10)  # Adjust the sleep time as needed
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

if __name__ == "__main__":
    monitor_system()
